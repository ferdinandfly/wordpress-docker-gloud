version: '3'

services:
  wp:
    build:
      dockerfile: config/Dockerfile
      context: .
    ports:
      - ${IP}:8080:8080 # change ip if required
    volumes:
      - ./config/php.conf.ini:/usr/local/etc/php/conf.d/conf.ini
      - ./config/sendmail.ini:/usr/local/etc/php/conf.d/sendmail.ini
      - ./config/apache2:/etc/apache2
      - ./config/msmtprc:/etc//msmtprc
      - backend-prod:/var/www/html # Full wordpress project
      #- ./plugin-name/trunk/:/var/www/html/wp-content/plugins/plugin-name # Plugin development
      #- ./theme-name/trunk/:/var/www/html/wp-content/themes/theme-name # Theme development
    environment:
      XDEBUG_CONFIG: remote_host=host.docker.internal
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_NAME: "${DB_NAME}"
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: "${DB_ROOT_PASSWORD}"
      DATABASE_URL: :/cloudsql/modular-analog-221817:europe-west4:ardetem-sfere
    depends_on:
      - db

#  cloud-sql-proxy:
#    image: gcr.io/cloudsql-docker/gce-proxy:1.15
#    # Port: MySQL (3306), PostgreSQL (5433)
#    command: /cloud_sql_proxy -instances=modular-analog-221817:europe-west4:ardetem-sfere=tcp:0.0.0.0:3306
#    volumes:
#    # this mounts your application default credential on the container, preventing the
#    # 'invalid json file "/config": google: read JWT from JSON credentials: 'type' field is "authorized_user" (expected "service_account")'
#    # error if you point to the actual credential file directly
#      - ~/.config:/root/.config
#    ports:
#      - 3336:3306
  db:
    image: mysql:latest # https://hub.docker.com/_/mysql/ - or mariadb https://hub.docker.com/_/mariadb
    security_opt:
      - seccomp:unconfined
    ports:
      - ${IP}:3306:3306 # change ip if required
    command: [
        '--default_authentication_plugin=mysql_native_password',
        '--character-set-server=utf8mb4',
        '--collation-server=utf8mb4_unicode_ci'
    ]
    volumes:
      - ./wp-data:/docker-entrypoint-initdb.d
      - db_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: "${DB_NAME}"
      MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASSWORD}"

  varnish:
    image: varnish:6.3
    depends_on:
      - wp
    volumes:
      - ./config/varnish:/etc/varnish
      - ./config/varnish.ini:/etc/default/varnish
    ports:
      - "80:80"
      - "6082:6082"
    links:
      - wp
volumes:
  backend:
    driver: local
    driver_opts:
      type: nfs
      o: addr=host.docker.internal,rw,nolock,hard,nointr,nfsvers=3
      device: ":${PWD}/wp-app"
  backend-origin:
    driver: local
    driver_opts:
      type: nfs
      o: addr=host.docker.internal,rw,nolock,hard,nointr,nfsvers=3
      device: ":${PWD}/wp-app-origin"
  backend-prod:
    driver: local
    driver_opts:
      type: nfs
      o: addr=host.docker.internal,rw,nolock,hard,nointr,nfsvers=3
      device: ":${PWD}/wp-app-prod"
  db_data:
